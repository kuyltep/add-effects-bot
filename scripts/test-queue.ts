#!/usr/bin/env npx ts-node
/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –æ—á–µ—Ä–µ–¥–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏–π
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * npm run test-queue
 */

import { addImageEffectJob } from '../src/queues/imageEffectQueue';
import { getQueuesStats } from '../src/utils/queue-cleanup';
import { v4 as uuidv4 } from 'uuid';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

async function testQueue() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –î–û –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:');
    const statsBefore = await getQueuesStats();
    console.log(JSON.stringify(statsBefore, null, 2));

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    const testJobData = {
      generationId: uuidv4(),
      userId: 'test-user-123',
      effect: 'pixar' as any,
      fileIds: ['test-file-id-123'],
      chatId: '123456789',
      messageId: 1,
      language: 'ru',
      resolution: 'SQUARE' as any,
      apiProvider: 'openai' as any,
    };

    console.log('\nüöÄ –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:');
    console.log(JSON.stringify(testJobData, null, 2));

    // 3. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    const job = await addImageEffectJob(testJobData);
    console.log(`\n‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å ID: ${job.id}`);

    // 4. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\n‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...');
    await new Promise(resolve => setTimeout(resolve, 5000));

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:');
    const statsAfter = await getQueuesStats();
    console.log(JSON.stringify(statsAfter, null, 2));

    console.log('\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏:', error);
    process.exit(1);
  }

  process.exit(0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testQueue().catch(console.error);

import { Queue } from 'bullmq';
import { prisma } from './prisma';
import { GenerationStatus } from '@prisma/client';
import { Logger } from './rollbar.logger';
import config from '../config';

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π –∏ —Å–±—Ä–æ—Å–∞ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –∑–∞–¥–∞—á
 */

// –°–æ–∑–¥–∞–µ–º Redis –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const getRedisConfig = () => {
  if (!config.redis.url) return null;

  const redisURL = new URL(config.redis.url);
  const redisConfig: any = {
    host: redisURL.hostname,
    port: parseInt(redisURL.port) || 6379,
    maxRetriesPerRequest: null,
    lazyConnect: true,
  };

  if (redisURL.username) {
    redisConfig.username = redisURL.username;
  }
  if (redisURL.password) {
    redisConfig.password = redisURL.password;
  }

  // Railway —Ç—Ä–µ–±—É–µ—Ç dual stack lookup —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  if (redisURL.hostname.includes('railway.internal') || redisURL.hostname.includes('rlwy.net')) {
    redisConfig.family = 0;
  }

  return redisConfig;
};

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Å–µ BullMQ –æ—á–µ—Ä–µ–¥–∏
 */
export async function clearAllQueues(): Promise<void> {
  const redisConfig = getRedisConfig();
  if (!redisConfig) {
    Logger.warn('Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –æ—á–µ—Ä–µ–¥–µ–π');
    return;
  }

  const queueNames = ['image-effect-generation', 'video-generation', 'upgrade-generation'];

  Logger.info('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π...', { queueNames });

  for (const queueName of queueNames) {
    try {
      const queue = new Queue(queueName, { connection: redisConfig });

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
      const waiting = await queue.getWaiting();
      const active = await queue.getActive();
      const completed = await queue.getCompleted();
      const failed = await queue.getFailed();
      const delayed = await queue.getDelayed();

      Logger.info(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ ${queueName}:`, {
        waiting: waiting.length,
        active: active.length,
        completed: completed.length,
        failed: failed.length,
        delayed: delayed.length,
      });

      // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è BullMQ)
      await queue.clean(0, 0, 'wait'); // waiting -> wait
      await queue.clean(0, 0, 'active');
      await queue.clean(0, 0, 'completed');
      await queue.clean(0, 0, 'failed');
      await queue.clean(0, 0, 'delayed');

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
      await queue.obliterate({ force: true });

      await queue.close();

      Logger.info(`‚úÖ –û—á–µ—Ä–µ–¥—å ${queueName} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞`);
    } catch (error) {
      Logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏ ${queueName}:`, error);
    }
  }

  Logger.info('üéâ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –∑–∞–¥–∞—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
export async function resetStuckGenerations(): Promise<void> {
  try {
    Logger.info('üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ –ë–î...');

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö PENDING –∏ PROCESSING
    const stuckGenerations = await prisma.generation.findMany({
      where: {
        status: {
          in: [GenerationStatus.PENDING, GenerationStatus.PROCESSING],
        },
      },
      select: {
        id: true,
        userId: true,
        status: true,
        createdAt: true,
      },
    });

    Logger.info(`üìã –ù–∞–π–¥–µ–Ω–æ ${stuckGenerations.length} –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π`);

    if (stuckGenerations.length > 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –Ω–∞ FAILED —Å –ø–æ–º–µ—Ç–∫–æ–π –æ —Å–±—Ä–æ—Å–µ
      const updateResult = await prisma.generation.updateMany({
        where: {
          status: {
            in: [GenerationStatus.PENDING, GenerationStatus.PROCESSING],
          },
        },
        data: {
          status: GenerationStatus.FAILED,
          error: '–°–±—Ä–æ—à–µ–Ω–æ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ—á–µ—Ä–µ–¥–µ–π - –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –∑–∞—Å—Ç—Ä—è–ª–∞',
        },
      });

      Logger.info(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updateResult.count} –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å—Ç–∞—Ç—É—Å FAILED`);

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      const userCounts = stuckGenerations.reduce(
        (acc, gen) => {
          acc[gen.userId] = (acc[gen.userId] || 0) + 1;
          return acc;
        },
        {} as Record<string, number>
      );

      Logger.info('üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:', userCounts);
    }
  } catch (error) {
    Logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: –æ—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤ –ë–î
 */
export async function fullCleanup(): Promise<void> {
  try {
    Logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –æ—á–µ—Ä–µ–¥–µ–π –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏
    await clearAllQueues();

    // –ó–∞—Ç–µ–º —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ –ë–î
    await resetStuckGenerations();

    Logger.info('üéä –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    Logger.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –æ—á–µ—Ä–µ–¥—è–º
 */
export async function getQueuesStats(): Promise<Record<string, any>> {
  const redisConfig = getRedisConfig();
  if (!redisConfig) {
    return { error: 'Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' };
  }

  const queueNames = ['image-effect-generation', 'video-generation', 'upgrade-generation'];
  const stats: Record<string, any> = {};

  for (const queueName of queueNames) {
    try {
      const queue = new Queue(queueName, { connection: redisConfig });

      const waiting = await queue.getWaiting();
      const active = await queue.getActive();
      const completed = await queue.getCompleted();
      const failed = await queue.getFailed();
      const delayed = await queue.getDelayed();

      stats[queueName] = {
        waiting: waiting.length,
        active: active.length,
        completed: completed.length,
        failed: failed.length,
        delayed: delayed.length,
        total: waiting.length + active.length + completed.length + failed.length + delayed.length,
      };

      await queue.close();
    } catch (error) {
      stats[queueName] = { error: error.message };
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
  try {
    const dbStats = await prisma.generation.groupBy({
      by: ['status'],
      _count: {
        status: true,
      },
    });

    stats.database = dbStats.reduce(
      (acc, stat) => {
        acc[stat.status] = stat._count.status;
        return acc;
      },
      {} as Record<string, number>
    );
  } catch (error) {
    stats.database = { error: error.message };
  }

  return stats;
}

/**
 * –û—á–∏—â–∞–µ—Ç –∑–∞–≤–∏—Å—à–∏–µ –∑–∞–¥–∞—á–∏ (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
 * @param maxAgeMinutes - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∑–∞–¥–∞—á –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç)
 */
export async function cleanStuckTasks(maxAgeMinutes: number = 30): Promise<void> {
  try {
    const cutoffTime = new Date(Date.now() - maxAgeMinutes * 60 * 1000);

    Logger.info(
      `üïê –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á —Å—Ç–∞—Ä—à–µ ${maxAgeMinutes} –º–∏–Ω—É—Ç (–¥–æ ${cutoffTime.toISOString()})`
    );

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–≤–∏—Å—à–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ë–î
    const stuckGenerations = await prisma.generation.findMany({
      where: {
        status: {
          in: [GenerationStatus.PENDING, GenerationStatus.PROCESSING],
        },
        createdAt: {
          lt: cutoffTime,
        },
      },
      select: {
        id: true,
        userId: true,
        status: true,
        createdAt: true,
      },
    });

    if (stuckGenerations.length === 0) {
      Logger.info('‚úÖ –ó–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    Logger.info(`üîç –ù–∞–π–¥–µ–Ω–æ ${stuckGenerations.length} –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á`, {
      cutoffTime: cutoffTime.toISOString(),
      taskIds: stuckGenerations.map(g => g.id),
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á
    const updateResult = await prisma.generation.updateMany({
      where: {
        id: {
          in: stuckGenerations.map(g => g.id),
        },
      },
      data: {
        status: GenerationStatus.FAILED,
        error: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–æ—à–µ–Ω–æ: –∑–∞–¥–∞—á–∞ –∑–∞–≤–∏—Å–ª–∞ –±–æ–ª–µ–µ ${maxAgeMinutes} –º–∏–Ω—É—Ç`,
      },
    });

    Logger.info(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–æ—à–µ–Ω–æ ${updateResult.count} –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á`);

    // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const userCounts = stuckGenerations.reduce(
      (acc, gen) => {
        acc[gen.userId] = (acc[gen.userId] || 0) + 1;
        return acc;
      },
      {} as Record<string, number>
    );

    if (Object.keys(userCounts).length > 0) {
      Logger.info('üë• –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', userCounts);
    }

    // –û—á–∏—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ Redis –æ—á–µ—Ä–µ–¥–µ–π
    await cleanOldRedisJobs(maxAgeMinutes);
  } catch (error) {
    Logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á:', error);
    throw error;
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ Redis –æ—á–µ—Ä–µ–¥–µ–π
 * @param maxAgeMinutes - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∑–∞–¥–∞—á –≤ –º–∏–Ω—É—Ç–∞—Ö
 */
async function cleanOldRedisJobs(maxAgeMinutes: number): Promise<void> {
  const redisConfig = getRedisConfig();
  if (!redisConfig) {
    Logger.warn('Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É Redis –æ—á–µ—Ä–µ–¥–µ–π');
    return;
  }

  const queueNames = ['image-effect-generation', 'video-generation', 'upgrade-generation'];
  const cutoffTimestamp = Date.now() - maxAgeMinutes * 60 * 1000;

  for (const queueName of queueNames) {
    try {
      const queue = new Queue(queueName, { connection: redisConfig });

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ (–∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–æ cutoffTimestamp)
      const cleanedCount = await queue.clean(cutoffTimestamp, 100, 'wait');
      const cleanedActiveCount = await queue.clean(cutoffTimestamp, 100, 'active');
      const cleanedFailedCount = await queue.clean(cutoffTimestamp, 100, 'failed');

      if (
        cleanedCount.length > 0 ||
        cleanedActiveCount.length > 0 ||
        cleanedFailedCount.length > 0
      ) {
        Logger.info(`üßπ –û—á–∏—â–µ–Ω–æ –∑–∞–¥–∞—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ${queueName}:`, {
          waiting: cleanedCount.length,
          active: cleanedActiveCount.length,
          failed: cleanedFailedCount.length,
        });
      }

      await queue.close();
    } catch (error) {
      Logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Redis –æ—á–µ—Ä–µ–¥–∏ ${queueName}:`, error);
    }
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
 * @param intervalMinutes - –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 –º–∏–Ω—É—Ç)
 * @param maxAgeMinutes - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç)
 */
export function startAutoCleanup(
  intervalMinutes: number = 15,
  maxAgeMinutes: number = 30
): NodeJS.Timeout {
  Logger.info(`üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á`, {
    intervalMinutes,
    maxAgeMinutes,
    nextRun: new Date(Date.now() + intervalMinutes * 60 * 1000).toISOString(),
  });

  const interval = setInterval(
    async () => {
      try {
        Logger.info('‚è∞ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á...');
        await cleanStuckTasks(maxAgeMinutes);
      } catch (error) {
        Logger.error('üí• –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ:', error);
      }
    },
    intervalMinutes * 60 * 1000
  );

  return interval;
}

/**
 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
 * @param interval - –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
 */
export function stopAutoCleanup(interval: NodeJS.Timeout): void {
  clearInterval(interval);
  Logger.info('‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
}
